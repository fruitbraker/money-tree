/*
 * This file is generated by jOOQ.
 */
package moneytree.persist.generated.tables.daos;


import moneytree.persist.generated.tables.pojos.ExpenseCategory;
import moneytree.persist.generated.tables.records.ExpenseCategoryRecord;
import java.math.BigDecimal;
import java.util.List;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExpenseCategoryDao extends DAOImpl<ExpenseCategoryRecord, ExpenseCategory, UUID> {

    /**
     * Create a new ExpenseCategoryDao without any configuration
     */
    public ExpenseCategoryDao() {
        super(moneytree.persist.generated.tables.ExpenseCategory.EXPENSE_CATEGORY, ExpenseCategory.class);
    }

    /**
     * Create a new ExpenseCategoryDao with an attached configuration
     */
    public ExpenseCategoryDao(Configuration configuration) {
        super(moneytree.persist.generated.tables.ExpenseCategory.EXPENSE_CATEGORY, ExpenseCategory.class, configuration);
    }

    @Override
    public UUID getId(ExpenseCategory object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ExpenseCategory> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(moneytree.persist.generated.tables.ExpenseCategory.EXPENSE_CATEGORY.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<ExpenseCategory> fetchById(UUID... values) {
        return fetch(moneytree.persist.generated.tables.ExpenseCategory.EXPENSE_CATEGORY.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public ExpenseCategory fetchOneById(UUID value) {
        return fetchOne(moneytree.persist.generated.tables.ExpenseCategory.EXPENSE_CATEGORY.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ExpenseCategory> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(moneytree.persist.generated.tables.ExpenseCategory.EXPENSE_CATEGORY.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<ExpenseCategory> fetchByName(String... values) {
        return fetch(moneytree.persist.generated.tables.ExpenseCategory.EXPENSE_CATEGORY.NAME, values);
    }

    /**
     * Fetch records that have <code>target_amount BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ExpenseCategory> fetchRangeOfTargetAmount(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(moneytree.persist.generated.tables.ExpenseCategory.EXPENSE_CATEGORY.TARGET_AMOUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>target_amount IN (values)</code>
     */
    public List<ExpenseCategory> fetchByTargetAmount(BigDecimal... values) {
        return fetch(moneytree.persist.generated.tables.ExpenseCategory.EXPENSE_CATEGORY.TARGET_AMOUNT, values);
    }
}
