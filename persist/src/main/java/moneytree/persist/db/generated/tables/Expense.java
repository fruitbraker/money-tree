/*
 * This file is generated by jOOQ.
 */
package moneytree.persist.db.generated.tables;


import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import moneytree.persist.db.generated.Keys;
import moneytree.persist.db.generated.Mtdev;
import moneytree.persist.db.generated.tables.records.ExpenseRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Expense extends TableImpl<ExpenseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mtdev.expense</code>
     */
    public static final Expense EXPENSE = new Expense();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExpenseRecord> getRecordType() {
        return ExpenseRecord.class;
    }

    /**
     * The column <code>mtdev.expense.expense_id</code>.
     */
    public final TableField<ExpenseRecord, UUID> EXPENSE_ID = createField(DSL.name("expense_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>mtdev.expense.transaction_date</code>.
     */
    public final TableField<ExpenseRecord, LocalDate> TRANSACTION_DATE = createField(DSL.name("transaction_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>mtdev.expense.transaction_amount</code>.
     */
    public final TableField<ExpenseRecord, BigDecimal> TRANSACTION_AMOUNT = createField(DSL.name("transaction_amount"), SQLDataType.NUMERIC(12, 4).nullable(false), this, "");

    /**
     * The column <code>mtdev.expense.vendor_id</code>.
     */
    public final TableField<ExpenseRecord, UUID> VENDOR_ID = createField(DSL.name("vendor_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>mtdev.expense.expense_category_id</code>.
     */
    public final TableField<ExpenseRecord, UUID> EXPENSE_CATEGORY_ID = createField(DSL.name("expense_category_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>mtdev.expense.notes</code>.
     */
    public final TableField<ExpenseRecord, String> NOTES = createField(DSL.name("notes"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>mtdev.expense.hide</code>.
     */
    public final TableField<ExpenseRecord, Boolean> HIDE = createField(DSL.name("hide"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    private Expense(Name alias, Table<ExpenseRecord> aliased) {
        this(alias, aliased, null);
    }

    private Expense(Name alias, Table<ExpenseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>mtdev.expense</code> table reference
     */
    public Expense(String alias) {
        this(DSL.name(alias), EXPENSE);
    }

    /**
     * Create an aliased <code>mtdev.expense</code> table reference
     */
    public Expense(Name alias) {
        this(alias, EXPENSE);
    }

    /**
     * Create a <code>mtdev.expense</code> table reference
     */
    public Expense() {
        this(DSL.name("expense"), null);
    }

    public <O extends Record> Expense(Table<O> child, ForeignKey<O, ExpenseRecord> key) {
        super(child, key, EXPENSE);
    }

    @Override
    public Schema getSchema() {
        return Mtdev.MTDEV;
    }

    @Override
    public UniqueKey<ExpenseRecord> getPrimaryKey() {
        return Keys.EXPENSE_PKEY;
    }

    @Override
    public List<UniqueKey<ExpenseRecord>> getKeys() {
        return Arrays.<UniqueKey<ExpenseRecord>>asList(Keys.EXPENSE_PKEY);
    }

    @Override
    public List<ForeignKey<ExpenseRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ExpenseRecord, ?>>asList(Keys.EXPENSE__EXPENSE_VENDOR_ID_FKEY, Keys.EXPENSE__EXPENSE_EXPENSE_CATEGORY_ID_FKEY);
    }

    private transient Vendor _vendor;
    private transient ExpenseCategory _expenseCategory;

    public Vendor vendor() {
        if (_vendor == null)
            _vendor = new Vendor(this, Keys.EXPENSE__EXPENSE_VENDOR_ID_FKEY);

        return _vendor;
    }

    public ExpenseCategory expenseCategory() {
        if (_expenseCategory == null)
            _expenseCategory = new ExpenseCategory(this, Keys.EXPENSE__EXPENSE_EXPENSE_CATEGORY_ID_FKEY);

        return _expenseCategory;
    }

    @Override
    public Expense as(String alias) {
        return new Expense(DSL.name(alias), this);
    }

    @Override
    public Expense as(Name alias) {
        return new Expense(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Expense rename(String name) {
        return new Expense(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Expense rename(Name name) {
        return new Expense(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, LocalDate, BigDecimal, UUID, UUID, String, Boolean> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
