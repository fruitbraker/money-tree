/*
 * This file is generated by jOOQ.
 */
package moneytree.persist.db.generated.tables;


import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import moneytree.persist.db.generated.Keys;
import moneytree.persist.db.generated.Mtdev;
import moneytree.persist.db.generated.tables.records.IncomeRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Income extends TableImpl<IncomeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mtdev.income</code>
     */
    public static final Income INCOME = new Income();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IncomeRecord> getRecordType() {
        return IncomeRecord.class;
    }

    /**
     * The column <code>mtdev.income.income_id</code>.
     */
    public final TableField<IncomeRecord, UUID> INCOME_ID = createField(DSL.name("income_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>mtdev.income.source</code>.
     */
    public final TableField<IncomeRecord, String> SOURCE = createField(DSL.name("source"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>mtdev.income.income_category_id</code>.
     */
    public final TableField<IncomeRecord, UUID> INCOME_CATEGORY_ID = createField(DSL.name("income_category_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>mtdev.income.transaction_amount</code>.
     */
    public final TableField<IncomeRecord, BigDecimal> TRANSACTION_AMOUNT = createField(DSL.name("transaction_amount"), SQLDataType.NUMERIC(12, 4).nullable(false), this, "");

    /**
     * The column <code>mtdev.income.transaction_date</code>.
     */
    public final TableField<IncomeRecord, LocalDate> TRANSACTION_DATE = createField(DSL.name("transaction_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>mtdev.income.notes</code>.
     */
    public final TableField<IncomeRecord, String> NOTES = createField(DSL.name("notes"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>mtdev.income.hide</code>.
     */
    public final TableField<IncomeRecord, Boolean> HIDE = createField(DSL.name("hide"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    private Income(Name alias, Table<IncomeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Income(Name alias, Table<IncomeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>mtdev.income</code> table reference
     */
    public Income(String alias) {
        this(DSL.name(alias), INCOME);
    }

    /**
     * Create an aliased <code>mtdev.income</code> table reference
     */
    public Income(Name alias) {
        this(alias, INCOME);
    }

    /**
     * Create a <code>mtdev.income</code> table reference
     */
    public Income() {
        this(DSL.name("income"), null);
    }

    public <O extends Record> Income(Table<O> child, ForeignKey<O, IncomeRecord> key) {
        super(child, key, INCOME);
    }

    @Override
    public Schema getSchema() {
        return Mtdev.MTDEV;
    }

    @Override
    public UniqueKey<IncomeRecord> getPrimaryKey() {
        return Keys.INCOME_PKEY;
    }

    @Override
    public List<UniqueKey<IncomeRecord>> getKeys() {
        return Arrays.<UniqueKey<IncomeRecord>>asList(Keys.INCOME_PKEY);
    }

    @Override
    public List<ForeignKey<IncomeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<IncomeRecord, ?>>asList(Keys.INCOME__INCOME_INCOME_CATEGORY_ID_FKEY);
    }

    private transient IncomeCategory _incomeCategory;

    public IncomeCategory incomeCategory() {
        if (_incomeCategory == null)
            _incomeCategory = new IncomeCategory(this, Keys.INCOME__INCOME_INCOME_CATEGORY_ID_FKEY);

        return _incomeCategory;
    }

    @Override
    public Income as(String alias) {
        return new Income(DSL.name(alias), this);
    }

    @Override
    public Income as(Name alias) {
        return new Income(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Income rename(String name) {
        return new Income(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Income rename(Name name) {
        return new Income(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, String, UUID, BigDecimal, LocalDate, String, Boolean> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
