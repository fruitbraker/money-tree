/*
 * This file is generated by jOOQ.
 */
package moneytree.persist.db.generated.tables.records;


import java.math.BigDecimal;
import java.util.UUID;

import moneytree.persist.db.generated.tables.ExpenseCategory;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExpenseCategoryRecord extends UpdatableRecordImpl<ExpenseCategoryRecord> implements Record3<UUID, String, BigDecimal> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>mtdev.expense_category.expense_category_id</code>.
     */
    public ExpenseCategoryRecord setExpenseCategoryId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>mtdev.expense_category.expense_category_id</code>.
     */
    public UUID getExpenseCategoryId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>mtdev.expense_category.name</code>.
     */
    public ExpenseCategoryRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>mtdev.expense_category.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>mtdev.expense_category.target_amount</code>.
     */
    public ExpenseCategoryRecord setTargetAmount(BigDecimal value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>mtdev.expense_category.target_amount</code>.
     */
    public BigDecimal getTargetAmount() {
        return (BigDecimal) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, String, BigDecimal> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<UUID, String, BigDecimal> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return ExpenseCategory.EXPENSE_CATEGORY.EXPENSE_CATEGORY_ID;
    }

    @Override
    public Field<String> field2() {
        return ExpenseCategory.EXPENSE_CATEGORY.NAME;
    }

    @Override
    public Field<BigDecimal> field3() {
        return ExpenseCategory.EXPENSE_CATEGORY.TARGET_AMOUNT;
    }

    @Override
    public UUID component1() {
        return getExpenseCategoryId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public BigDecimal component3() {
        return getTargetAmount();
    }

    @Override
    public UUID value1() {
        return getExpenseCategoryId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public BigDecimal value3() {
        return getTargetAmount();
    }

    @Override
    public ExpenseCategoryRecord value1(UUID value) {
        setExpenseCategoryId(value);
        return this;
    }

    @Override
    public ExpenseCategoryRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public ExpenseCategoryRecord value3(BigDecimal value) {
        setTargetAmount(value);
        return this;
    }

    @Override
    public ExpenseCategoryRecord values(UUID value1, String value2, BigDecimal value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ExpenseCategoryRecord
     */
    public ExpenseCategoryRecord() {
        super(ExpenseCategory.EXPENSE_CATEGORY);
    }

    /**
     * Create a detached, initialised ExpenseCategoryRecord
     */
    public ExpenseCategoryRecord(UUID expenseCategoryId, String name, BigDecimal targetAmount) {
        super(ExpenseCategory.EXPENSE_CATEGORY);

        setExpenseCategoryId(expenseCategoryId);
        setName(name);
        setTargetAmount(targetAmount);
    }
}
